
UART_TX2_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c1c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d4c  08000d4c  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d4c  08000d4c  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d4c  08000d4c  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d4c  08000d4c  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d4c  08000d4c  00001d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d50  08000d50  00001d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000d54  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000db0  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000db0  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b92  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003fc  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00003018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d7  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000119ed  00000000  00000000  00003227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000189d  00000000  00000000  00014c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005888b  00000000  00000000  000164b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006ed3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a8c  00000000  00000000  0006ed80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0006f80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d34 	.word	0x08000d34

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08000d34 	.word	0x08000d34

08000170 <__io_putchar>:
static uint32_t compute_uart_bd(uint32_t periphCLK, uint32_t BaudRate);

void uart_write(int ch);
void uart_tx_init(void);

int __io_putchar(int ch){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f000 f855 	bl	8000228 <uart_write>
	return ch ;
 800017e:	687b      	ldr	r3, [r7, #4]
}
 8000180:	4618      	mov	r0, r3
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <main>:


int main(void){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0

	uart_tx_init();
 800018c:	f000 f804 	bl	8000198 <uart_tx_init>

     while(1){

    	 printf("y");
 8000190:	2079      	movs	r0, #121	@ 0x79
 8000192:	f000 fa0d 	bl	80005b0 <putchar>
 8000196:	e7fb      	b.n	8000190 <main+0x8>

08000198 <uart_tx_init>:


     }
}

void uart_tx_init(void){
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	/*******************configure UART GPIO pin*********************/
	/*Enable clock access to GPIOB*/
	RCC->APB2ENR |=GPIOAEN;
 800019c:	4b1d      	ldr	r3, [pc, #116]	@ (8000214 <uart_tx_init+0x7c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000214 <uart_tx_init+0x7c>)
 80001a2:	f043 0304 	orr.w	r3, r3, #4
 80001a6:	6193      	str	r3, [r2, #24]

	/*set PB10 to alternate function mode*/
	GPIOB->CRL |=(1U<<11);
 80001a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000218 <uart_tx_init+0x80>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000218 <uart_tx_init+0x80>)
 80001ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &=~(1U<<10);
 80001b4:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <uart_tx_init+0x80>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a17      	ldr	r2, [pc, #92]	@ (8000218 <uart_tx_init+0x80>)
 80001ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80001be:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=(1U<<8);
 80001c0:	4b15      	ldr	r3, [pc, #84]	@ (8000218 <uart_tx_init+0x80>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a14      	ldr	r2, [pc, #80]	@ (8000218 <uart_tx_init+0x80>)
 80001c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001ca:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &=~(1U<<9);
 80001cc:	4b12      	ldr	r3, [pc, #72]	@ (8000218 <uart_tx_init+0x80>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a11      	ldr	r2, [pc, #68]	@ (8000218 <uart_tx_init+0x80>)
 80001d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80001d6:	6013      	str	r3, [r2, #0]

	/*set PB10 alternate function type to UART_TX*/
	AFIO->MAPR &=~(1U<<3);
 80001d8:	4b10      	ldr	r3, [pc, #64]	@ (800021c <uart_tx_init+0x84>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	4a0f      	ldr	r2, [pc, #60]	@ (800021c <uart_tx_init+0x84>)
 80001de:	f023 0308 	bic.w	r3, r3, #8
 80001e2:	6053      	str	r3, [r2, #4]



	/*******************configure UART module *********************/
	/*Enable clock access to UART3*/
	RCC->APB1ENR |= UART2EN;
 80001e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000214 <uart_tx_init+0x7c>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000214 <uart_tx_init+0x7c>)
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001ee:	61d3      	str	r3, [r2, #28]

	/*configure the BAUDRATE*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80001f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001f4:	490a      	ldr	r1, [pc, #40]	@ (8000220 <uart_tx_init+0x88>)
 80001f6:	480b      	ldr	r0, [pc, #44]	@ (8000224 <uart_tx_init+0x8c>)
 80001f8:	f000 f82c 	bl	8000254 <uart_set_baudrate>

	/*configure the transfer direction*/
	USART2->CR1 = CR1_TE;
 80001fc:	4b09      	ldr	r3, [pc, #36]	@ (8000224 <uart_tx_init+0x8c>)
 80001fe:	2208      	movs	r2, #8
 8000200:	60da      	str	r2, [r3, #12]

	/*Enable the UART module*/
	USART2->CR1 |= CR1_UE;
 8000202:	4b08      	ldr	r3, [pc, #32]	@ (8000224 <uart_tx_init+0x8c>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	4a07      	ldr	r2, [pc, #28]	@ (8000224 <uart_tx_init+0x8c>)
 8000208:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800020c:	60d3      	str	r3, [r2, #12]

}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40021000 	.word	0x40021000
 8000218:	40010c00 	.word	0x40010c00
 800021c:	40010000 	.word	0x40010000
 8000220:	00f42400 	.word	0x00f42400
 8000224:	40004400 	.word	0x40004400

08000228 <uart_write>:
void uart_write(int ch){
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	/*make the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}                    //we stuck here until it becomes true then we can write our value
 8000230:	bf00      	nop
 8000232:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <uart_write+0x28>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f9      	beq.n	8000232 <uart_write+0xa>

	/*write to transmit data register*/
	USART2->DR   = (ch   &  0xff);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a03      	ldr	r2, [pc, #12]	@ (8000250 <uart_write+0x28>)
 8000242:	b2db      	uxtb	r3, r3
 8000244:	6053      	str	r3, [r2, #4]
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	40004400 	.word	0x40004400

08000254 <uart_set_baudrate>:



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t BaudRate){
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]

	USARTx->BRR = compute_uart_bd(periphCLK,BaudRate);
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	68b8      	ldr	r0, [r7, #8]
 8000264:	f000 f807 	bl	8000276 <compute_uart_bd>
 8000268:	4602      	mov	r2, r0
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	609a      	str	r2, [r3, #8]
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <compute_uart_bd>:

static uint32_t compute_uart_bd(uint32_t periphCLK, uint32_t BaudRate){
 8000276:	b480      	push	{r7}
 8000278:	b083      	sub	sp, #12
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
 800027e:	6039      	str	r1, [r7, #0]

	return ((periphCLK + (BaudRate/2U))/BaudRate);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	085a      	lsrs	r2, r3, #1
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	441a      	add	r2, r3
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	e00a      	b.n	80002c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002aa:	f3af 8000 	nop.w
 80002ae:	4601      	mov	r1, r0
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	60ba      	str	r2, [r7, #8]
 80002b6:	b2ca      	uxtb	r2, r1
 80002b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	3301      	adds	r3, #1
 80002be:	617b      	str	r3, [r7, #20]
 80002c0:	697a      	ldr	r2, [r7, #20]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	dbf0      	blt.n	80002aa <_read+0x12>
  }

  return len;
 80002c8:	687b      	ldr	r3, [r7, #4]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b086      	sub	sp, #24
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	e009      	b.n	80002f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	1c5a      	adds	r2, r3, #1
 80002e8:	60ba      	str	r2, [r7, #8]
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ff3f 	bl	8000170 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbf1      	blt.n	80002e4 <_write+0x12>
  }
  return len;
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <_close>:

int _close(int file)
{
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000330:	605a      	str	r2, [r3, #4]
  return 0;
 8000332:	2300      	movs	r3, #0
}
 8000334:	4618      	mov	r0, r3
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <_isatty>:

int _isatty(int file)
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000346:	2301      	movs	r3, #1
}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr

08000352 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000352:	b480      	push	{r7}
 8000354:	b085      	sub	sp, #20
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800035e:	2300      	movs	r3, #0
}
 8000360:	4618      	mov	r0, r3
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
	...

0800036c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000374:	4a14      	ldr	r2, [pc, #80]	@ (80003c8 <_sbrk+0x5c>)
 8000376:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <_sbrk+0x60>)
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000380:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <_sbrk+0x64>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d102      	bne.n	800038e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <_sbrk+0x64>)
 800038a:	4a12      	ldr	r2, [pc, #72]	@ (80003d4 <_sbrk+0x68>)
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800038e:	4b10      	ldr	r3, [pc, #64]	@ (80003d0 <_sbrk+0x64>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	693a      	ldr	r2, [r7, #16]
 8000398:	429a      	cmp	r2, r3
 800039a:	d207      	bcs.n	80003ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800039c:	f000 f9a2 	bl	80006e4 <__errno>
 80003a0:	4603      	mov	r3, r0
 80003a2:	220c      	movs	r2, #12
 80003a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003a6:	f04f 33ff 	mov.w	r3, #4294967295
 80003aa:	e009      	b.n	80003c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003ac:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <_sbrk+0x64>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003b2:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <_sbrk+0x64>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	4a05      	ldr	r2, [pc, #20]	@ (80003d0 <_sbrk+0x64>)
 80003bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003be:	68fb      	ldr	r3, [r7, #12]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3718      	adds	r7, #24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20005000 	.word	0x20005000
 80003cc:	00000400 	.word	0x00000400
 80003d0:	20000078 	.word	0x20000078
 80003d4:	200001c8 	.word	0x200001c8

080003d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d8:	480d      	ldr	r0, [pc, #52]	@ (8000410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e0:	480c      	ldr	r0, [pc, #48]	@ (8000414 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e2:	490d      	ldr	r1, [pc, #52]	@ (8000418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e4:	4a0d      	ldr	r2, [pc, #52]	@ (800041c <LoopForever+0xe>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000424 <LoopForever+0x16>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000406:	f000 f973 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040a:	f7ff febd 	bl	8000188 <main>

0800040e <LoopForever>:

LoopForever:
  b LoopForever
 800040e:	e7fe      	b.n	800040e <LoopForever>
  ldr   r0, =_estack
 8000410:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800041c:	08000d54 	.word	0x08000d54
  ldr r2, =_sbss
 8000420:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000424:	200001c8 	.word	0x200001c8

08000428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC1_2_IRQHandler>
	...

0800042c <std>:
 800042c:	2300      	movs	r3, #0
 800042e:	b510      	push	{r4, lr}
 8000430:	4604      	mov	r4, r0
 8000432:	e9c0 3300 	strd	r3, r3, [r0]
 8000436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800043a:	6083      	str	r3, [r0, #8]
 800043c:	8181      	strh	r1, [r0, #12]
 800043e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000440:	81c2      	strh	r2, [r0, #14]
 8000442:	6183      	str	r3, [r0, #24]
 8000444:	4619      	mov	r1, r3
 8000446:	2208      	movs	r2, #8
 8000448:	305c      	adds	r0, #92	@ 0x5c
 800044a:	f000 f8fc 	bl	8000646 <memset>
 800044e:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <std+0x58>)
 8000450:	6224      	str	r4, [r4, #32]
 8000452:	6263      	str	r3, [r4, #36]	@ 0x24
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <std+0x5c>)
 8000456:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <std+0x60>)
 800045a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <std+0x64>)
 800045e:	6323      	str	r3, [r4, #48]	@ 0x30
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <std+0x68>)
 8000462:	429c      	cmp	r4, r3
 8000464:	d006      	beq.n	8000474 <std+0x48>
 8000466:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800046a:	4294      	cmp	r4, r2
 800046c:	d002      	beq.n	8000474 <std+0x48>
 800046e:	33d0      	adds	r3, #208	@ 0xd0
 8000470:	429c      	cmp	r4, r3
 8000472:	d105      	bne.n	8000480 <std+0x54>
 8000474:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800047c:	f000 b95c 	b.w	8000738 <__retarget_lock_init_recursive>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	bf00      	nop
 8000484:	080005c1 	.word	0x080005c1
 8000488:	080005e3 	.word	0x080005e3
 800048c:	0800061b 	.word	0x0800061b
 8000490:	0800063f 	.word	0x0800063f
 8000494:	2000007c 	.word	0x2000007c

08000498 <stdio_exit_handler>:
 8000498:	4a02      	ldr	r2, [pc, #8]	@ (80004a4 <stdio_exit_handler+0xc>)
 800049a:	4903      	ldr	r1, [pc, #12]	@ (80004a8 <stdio_exit_handler+0x10>)
 800049c:	4803      	ldr	r0, [pc, #12]	@ (80004ac <stdio_exit_handler+0x14>)
 800049e:	f000 b869 	b.w	8000574 <_fwalk_sglue>
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	08000a2d 	.word	0x08000a2d
 80004ac:	20000010 	.word	0x20000010

080004b0 <cleanup_stdio>:
 80004b0:	6841      	ldr	r1, [r0, #4]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <cleanup_stdio+0x34>)
 80004b4:	b510      	push	{r4, lr}
 80004b6:	4299      	cmp	r1, r3
 80004b8:	4604      	mov	r4, r0
 80004ba:	d001      	beq.n	80004c0 <cleanup_stdio+0x10>
 80004bc:	f000 fab6 	bl	8000a2c <_fflush_r>
 80004c0:	68a1      	ldr	r1, [r4, #8]
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <cleanup_stdio+0x38>)
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d002      	beq.n	80004ce <cleanup_stdio+0x1e>
 80004c8:	4620      	mov	r0, r4
 80004ca:	f000 faaf 	bl	8000a2c <_fflush_r>
 80004ce:	68e1      	ldr	r1, [r4, #12]
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <cleanup_stdio+0x3c>)
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d004      	beq.n	80004e0 <cleanup_stdio+0x30>
 80004d6:	4620      	mov	r0, r4
 80004d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004dc:	f000 baa6 	b.w	8000a2c <_fflush_r>
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	bf00      	nop
 80004e4:	2000007c 	.word	0x2000007c
 80004e8:	200000e4 	.word	0x200000e4
 80004ec:	2000014c 	.word	0x2000014c

080004f0 <global_stdio_init.part.0>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <global_stdio_init.part.0+0x30>)
 80004f4:	4c0b      	ldr	r4, [pc, #44]	@ (8000524 <global_stdio_init.part.0+0x34>)
 80004f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000528 <global_stdio_init.part.0+0x38>)
 80004f8:	4620      	mov	r0, r4
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	2104      	movs	r1, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	f7ff ff94 	bl	800042c <std>
 8000504:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000508:	2201      	movs	r2, #1
 800050a:	2109      	movs	r1, #9
 800050c:	f7ff ff8e 	bl	800042c <std>
 8000510:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000514:	2202      	movs	r2, #2
 8000516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800051a:	2112      	movs	r1, #18
 800051c:	f7ff bf86 	b.w	800042c <std>
 8000520:	200001b4 	.word	0x200001b4
 8000524:	2000007c 	.word	0x2000007c
 8000528:	08000499 	.word	0x08000499

0800052c <__sfp_lock_acquire>:
 800052c:	4801      	ldr	r0, [pc, #4]	@ (8000534 <__sfp_lock_acquire+0x8>)
 800052e:	f000 b904 	b.w	800073a <__retarget_lock_acquire_recursive>
 8000532:	bf00      	nop
 8000534:	200001bd 	.word	0x200001bd

08000538 <__sfp_lock_release>:
 8000538:	4801      	ldr	r0, [pc, #4]	@ (8000540 <__sfp_lock_release+0x8>)
 800053a:	f000 b8ff 	b.w	800073c <__retarget_lock_release_recursive>
 800053e:	bf00      	nop
 8000540:	200001bd 	.word	0x200001bd

08000544 <__sinit>:
 8000544:	b510      	push	{r4, lr}
 8000546:	4604      	mov	r4, r0
 8000548:	f7ff fff0 	bl	800052c <__sfp_lock_acquire>
 800054c:	6a23      	ldr	r3, [r4, #32]
 800054e:	b11b      	cbz	r3, 8000558 <__sinit+0x14>
 8000550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000554:	f7ff bff0 	b.w	8000538 <__sfp_lock_release>
 8000558:	4b04      	ldr	r3, [pc, #16]	@ (800056c <__sinit+0x28>)
 800055a:	6223      	str	r3, [r4, #32]
 800055c:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <__sinit+0x2c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f5      	bne.n	8000550 <__sinit+0xc>
 8000564:	f7ff ffc4 	bl	80004f0 <global_stdio_init.part.0>
 8000568:	e7f2      	b.n	8000550 <__sinit+0xc>
 800056a:	bf00      	nop
 800056c:	080004b1 	.word	0x080004b1
 8000570:	200001b4 	.word	0x200001b4

08000574 <_fwalk_sglue>:
 8000574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000578:	4607      	mov	r7, r0
 800057a:	4688      	mov	r8, r1
 800057c:	4614      	mov	r4, r2
 800057e:	2600      	movs	r6, #0
 8000580:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000584:	f1b9 0901 	subs.w	r9, r9, #1
 8000588:	d505      	bpl.n	8000596 <_fwalk_sglue+0x22>
 800058a:	6824      	ldr	r4, [r4, #0]
 800058c:	2c00      	cmp	r4, #0
 800058e:	d1f7      	bne.n	8000580 <_fwalk_sglue+0xc>
 8000590:	4630      	mov	r0, r6
 8000592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000596:	89ab      	ldrh	r3, [r5, #12]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d907      	bls.n	80005ac <_fwalk_sglue+0x38>
 800059c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80005a0:	3301      	adds	r3, #1
 80005a2:	d003      	beq.n	80005ac <_fwalk_sglue+0x38>
 80005a4:	4629      	mov	r1, r5
 80005a6:	4638      	mov	r0, r7
 80005a8:	47c0      	blx	r8
 80005aa:	4306      	orrs	r6, r0
 80005ac:	3568      	adds	r5, #104	@ 0x68
 80005ae:	e7e9      	b.n	8000584 <_fwalk_sglue+0x10>

080005b0 <putchar>:
 80005b0:	4b02      	ldr	r3, [pc, #8]	@ (80005bc <putchar+0xc>)
 80005b2:	4601      	mov	r1, r0
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	6882      	ldr	r2, [r0, #8]
 80005b8:	f000 ba60 	b.w	8000a7c <_putc_r>
 80005bc:	2000000c 	.word	0x2000000c

080005c0 <__sread>:
 80005c0:	b510      	push	{r4, lr}
 80005c2:	460c      	mov	r4, r1
 80005c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80005c8:	f000 f868 	bl	800069c <_read_r>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	bfab      	itete	ge
 80005d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80005d2:	89a3      	ldrhlt	r3, [r4, #12]
 80005d4:	181b      	addge	r3, r3, r0
 80005d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80005da:	bfac      	ite	ge
 80005dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80005de:	81a3      	strhlt	r3, [r4, #12]
 80005e0:	bd10      	pop	{r4, pc}

080005e2 <__swrite>:
 80005e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005e6:	461f      	mov	r7, r3
 80005e8:	898b      	ldrh	r3, [r1, #12]
 80005ea:	4605      	mov	r5, r0
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	460c      	mov	r4, r1
 80005f0:	4616      	mov	r6, r2
 80005f2:	d505      	bpl.n	8000600 <__swrite+0x1e>
 80005f4:	2302      	movs	r3, #2
 80005f6:	2200      	movs	r2, #0
 80005f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80005fc:	f000 f83c 	bl	8000678 <_lseek_r>
 8000600:	89a3      	ldrh	r3, [r4, #12]
 8000602:	4632      	mov	r2, r6
 8000604:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000608:	81a3      	strh	r3, [r4, #12]
 800060a:	4628      	mov	r0, r5
 800060c:	463b      	mov	r3, r7
 800060e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000616:	f000 b853 	b.w	80006c0 <_write_r>

0800061a <__sseek>:
 800061a:	b510      	push	{r4, lr}
 800061c:	460c      	mov	r4, r1
 800061e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000622:	f000 f829 	bl	8000678 <_lseek_r>
 8000626:	1c43      	adds	r3, r0, #1
 8000628:	89a3      	ldrh	r3, [r4, #12]
 800062a:	bf15      	itete	ne
 800062c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800062e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000636:	81a3      	strheq	r3, [r4, #12]
 8000638:	bf18      	it	ne
 800063a:	81a3      	strhne	r3, [r4, #12]
 800063c:	bd10      	pop	{r4, pc}

0800063e <__sclose>:
 800063e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000642:	f000 b809 	b.w	8000658 <_close_r>

08000646 <memset>:
 8000646:	4603      	mov	r3, r0
 8000648:	4402      	add	r2, r0
 800064a:	4293      	cmp	r3, r2
 800064c:	d100      	bne.n	8000650 <memset+0xa>
 800064e:	4770      	bx	lr
 8000650:	f803 1b01 	strb.w	r1, [r3], #1
 8000654:	e7f9      	b.n	800064a <memset+0x4>
	...

08000658 <_close_r>:
 8000658:	b538      	push	{r3, r4, r5, lr}
 800065a:	2300      	movs	r3, #0
 800065c:	4d05      	ldr	r5, [pc, #20]	@ (8000674 <_close_r+0x1c>)
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	602b      	str	r3, [r5, #0]
 8000664:	f7ff fe51 	bl	800030a <_close>
 8000668:	1c43      	adds	r3, r0, #1
 800066a:	d102      	bne.n	8000672 <_close_r+0x1a>
 800066c:	682b      	ldr	r3, [r5, #0]
 800066e:	b103      	cbz	r3, 8000672 <_close_r+0x1a>
 8000670:	6023      	str	r3, [r4, #0]
 8000672:	bd38      	pop	{r3, r4, r5, pc}
 8000674:	200001b8 	.word	0x200001b8

08000678 <_lseek_r>:
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
 800067c:	4608      	mov	r0, r1
 800067e:	4611      	mov	r1, r2
 8000680:	2200      	movs	r2, #0
 8000682:	4d05      	ldr	r5, [pc, #20]	@ (8000698 <_lseek_r+0x20>)
 8000684:	602a      	str	r2, [r5, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	f7ff fe63 	bl	8000352 <_lseek>
 800068c:	1c43      	adds	r3, r0, #1
 800068e:	d102      	bne.n	8000696 <_lseek_r+0x1e>
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	b103      	cbz	r3, 8000696 <_lseek_r+0x1e>
 8000694:	6023      	str	r3, [r4, #0]
 8000696:	bd38      	pop	{r3, r4, r5, pc}
 8000698:	200001b8 	.word	0x200001b8

0800069c <_read_r>:
 800069c:	b538      	push	{r3, r4, r5, lr}
 800069e:	4604      	mov	r4, r0
 80006a0:	4608      	mov	r0, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	2200      	movs	r2, #0
 80006a6:	4d05      	ldr	r5, [pc, #20]	@ (80006bc <_read_r+0x20>)
 80006a8:	602a      	str	r2, [r5, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	f7ff fdf4 	bl	8000298 <_read>
 80006b0:	1c43      	adds	r3, r0, #1
 80006b2:	d102      	bne.n	80006ba <_read_r+0x1e>
 80006b4:	682b      	ldr	r3, [r5, #0]
 80006b6:	b103      	cbz	r3, 80006ba <_read_r+0x1e>
 80006b8:	6023      	str	r3, [r4, #0]
 80006ba:	bd38      	pop	{r3, r4, r5, pc}
 80006bc:	200001b8 	.word	0x200001b8

080006c0 <_write_r>:
 80006c0:	b538      	push	{r3, r4, r5, lr}
 80006c2:	4604      	mov	r4, r0
 80006c4:	4608      	mov	r0, r1
 80006c6:	4611      	mov	r1, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	4d05      	ldr	r5, [pc, #20]	@ (80006e0 <_write_r+0x20>)
 80006cc:	602a      	str	r2, [r5, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	f7ff fdff 	bl	80002d2 <_write>
 80006d4:	1c43      	adds	r3, r0, #1
 80006d6:	d102      	bne.n	80006de <_write_r+0x1e>
 80006d8:	682b      	ldr	r3, [r5, #0]
 80006da:	b103      	cbz	r3, 80006de <_write_r+0x1e>
 80006dc:	6023      	str	r3, [r4, #0]
 80006de:	bd38      	pop	{r3, r4, r5, pc}
 80006e0:	200001b8 	.word	0x200001b8

080006e4 <__errno>:
 80006e4:	4b01      	ldr	r3, [pc, #4]	@ (80006ec <__errno+0x8>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000000c 	.word	0x2000000c

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	2600      	movs	r6, #0
 80006f4:	4d0c      	ldr	r5, [pc, #48]	@ (8000728 <__libc_init_array+0x38>)
 80006f6:	4c0d      	ldr	r4, [pc, #52]	@ (800072c <__libc_init_array+0x3c>)
 80006f8:	1b64      	subs	r4, r4, r5
 80006fa:	10a4      	asrs	r4, r4, #2
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	f000 fb18 	bl	8000d34 <_init>
 8000704:	2600      	movs	r6, #0
 8000706:	4d0a      	ldr	r5, [pc, #40]	@ (8000730 <__libc_init_array+0x40>)
 8000708:	4c0a      	ldr	r4, [pc, #40]	@ (8000734 <__libc_init_array+0x44>)
 800070a:	1b64      	subs	r4, r4, r5
 800070c:	10a4      	asrs	r4, r4, #2
 800070e:	42a6      	cmp	r6, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f855 3b04 	ldr.w	r3, [r5], #4
 8000718:	4798      	blx	r3
 800071a:	3601      	adds	r6, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000722:	4798      	blx	r3
 8000724:	3601      	adds	r6, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	08000d4c 	.word	0x08000d4c
 800072c:	08000d4c 	.word	0x08000d4c
 8000730:	08000d4c 	.word	0x08000d4c
 8000734:	08000d50 	.word	0x08000d50

08000738 <__retarget_lock_init_recursive>:
 8000738:	4770      	bx	lr

0800073a <__retarget_lock_acquire_recursive>:
 800073a:	4770      	bx	lr

0800073c <__retarget_lock_release_recursive>:
 800073c:	4770      	bx	lr
	...

08000740 <_free_r>:
 8000740:	b538      	push	{r3, r4, r5, lr}
 8000742:	4605      	mov	r5, r0
 8000744:	2900      	cmp	r1, #0
 8000746:	d040      	beq.n	80007ca <_free_r+0x8a>
 8000748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800074c:	1f0c      	subs	r4, r1, #4
 800074e:	2b00      	cmp	r3, #0
 8000750:	bfb8      	it	lt
 8000752:	18e4      	addlt	r4, r4, r3
 8000754:	f000 f8de 	bl	8000914 <__malloc_lock>
 8000758:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <_free_r+0x8c>)
 800075a:	6813      	ldr	r3, [r2, #0]
 800075c:	b933      	cbnz	r3, 800076c <_free_r+0x2c>
 800075e:	6063      	str	r3, [r4, #4]
 8000760:	6014      	str	r4, [r2, #0]
 8000762:	4628      	mov	r0, r5
 8000764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000768:	f000 b8da 	b.w	8000920 <__malloc_unlock>
 800076c:	42a3      	cmp	r3, r4
 800076e:	d908      	bls.n	8000782 <_free_r+0x42>
 8000770:	6820      	ldr	r0, [r4, #0]
 8000772:	1821      	adds	r1, r4, r0
 8000774:	428b      	cmp	r3, r1
 8000776:	bf01      	itttt	eq
 8000778:	6819      	ldreq	r1, [r3, #0]
 800077a:	685b      	ldreq	r3, [r3, #4]
 800077c:	1809      	addeq	r1, r1, r0
 800077e:	6021      	streq	r1, [r4, #0]
 8000780:	e7ed      	b.n	800075e <_free_r+0x1e>
 8000782:	461a      	mov	r2, r3
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	b10b      	cbz	r3, 800078c <_free_r+0x4c>
 8000788:	42a3      	cmp	r3, r4
 800078a:	d9fa      	bls.n	8000782 <_free_r+0x42>
 800078c:	6811      	ldr	r1, [r2, #0]
 800078e:	1850      	adds	r0, r2, r1
 8000790:	42a0      	cmp	r0, r4
 8000792:	d10b      	bne.n	80007ac <_free_r+0x6c>
 8000794:	6820      	ldr	r0, [r4, #0]
 8000796:	4401      	add	r1, r0
 8000798:	1850      	adds	r0, r2, r1
 800079a:	4283      	cmp	r3, r0
 800079c:	6011      	str	r1, [r2, #0]
 800079e:	d1e0      	bne.n	8000762 <_free_r+0x22>
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	4408      	add	r0, r1
 80007a6:	6010      	str	r0, [r2, #0]
 80007a8:	6053      	str	r3, [r2, #4]
 80007aa:	e7da      	b.n	8000762 <_free_r+0x22>
 80007ac:	d902      	bls.n	80007b4 <_free_r+0x74>
 80007ae:	230c      	movs	r3, #12
 80007b0:	602b      	str	r3, [r5, #0]
 80007b2:	e7d6      	b.n	8000762 <_free_r+0x22>
 80007b4:	6820      	ldr	r0, [r4, #0]
 80007b6:	1821      	adds	r1, r4, r0
 80007b8:	428b      	cmp	r3, r1
 80007ba:	bf01      	itttt	eq
 80007bc:	6819      	ldreq	r1, [r3, #0]
 80007be:	685b      	ldreq	r3, [r3, #4]
 80007c0:	1809      	addeq	r1, r1, r0
 80007c2:	6021      	streq	r1, [r4, #0]
 80007c4:	6063      	str	r3, [r4, #4]
 80007c6:	6054      	str	r4, [r2, #4]
 80007c8:	e7cb      	b.n	8000762 <_free_r+0x22>
 80007ca:	bd38      	pop	{r3, r4, r5, pc}
 80007cc:	200001c4 	.word	0x200001c4

080007d0 <sbrk_aligned>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	4e0f      	ldr	r6, [pc, #60]	@ (8000810 <sbrk_aligned+0x40>)
 80007d4:	460c      	mov	r4, r1
 80007d6:	6831      	ldr	r1, [r6, #0]
 80007d8:	4605      	mov	r5, r0
 80007da:	b911      	cbnz	r1, 80007e2 <sbrk_aligned+0x12>
 80007dc:	f000 fa16 	bl	8000c0c <_sbrk_r>
 80007e0:	6030      	str	r0, [r6, #0]
 80007e2:	4621      	mov	r1, r4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f000 fa11 	bl	8000c0c <_sbrk_r>
 80007ea:	1c43      	adds	r3, r0, #1
 80007ec:	d103      	bne.n	80007f6 <sbrk_aligned+0x26>
 80007ee:	f04f 34ff 	mov.w	r4, #4294967295
 80007f2:	4620      	mov	r0, r4
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	1cc4      	adds	r4, r0, #3
 80007f8:	f024 0403 	bic.w	r4, r4, #3
 80007fc:	42a0      	cmp	r0, r4
 80007fe:	d0f8      	beq.n	80007f2 <sbrk_aligned+0x22>
 8000800:	1a21      	subs	r1, r4, r0
 8000802:	4628      	mov	r0, r5
 8000804:	f000 fa02 	bl	8000c0c <_sbrk_r>
 8000808:	3001      	adds	r0, #1
 800080a:	d1f2      	bne.n	80007f2 <sbrk_aligned+0x22>
 800080c:	e7ef      	b.n	80007ee <sbrk_aligned+0x1e>
 800080e:	bf00      	nop
 8000810:	200001c0 	.word	0x200001c0

08000814 <_malloc_r>:
 8000814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000818:	1ccd      	adds	r5, r1, #3
 800081a:	f025 0503 	bic.w	r5, r5, #3
 800081e:	3508      	adds	r5, #8
 8000820:	2d0c      	cmp	r5, #12
 8000822:	bf38      	it	cc
 8000824:	250c      	movcc	r5, #12
 8000826:	2d00      	cmp	r5, #0
 8000828:	4606      	mov	r6, r0
 800082a:	db01      	blt.n	8000830 <_malloc_r+0x1c>
 800082c:	42a9      	cmp	r1, r5
 800082e:	d904      	bls.n	800083a <_malloc_r+0x26>
 8000830:	230c      	movs	r3, #12
 8000832:	6033      	str	r3, [r6, #0]
 8000834:	2000      	movs	r0, #0
 8000836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800083a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000910 <_malloc_r+0xfc>
 800083e:	f000 f869 	bl	8000914 <__malloc_lock>
 8000842:	f8d8 3000 	ldr.w	r3, [r8]
 8000846:	461c      	mov	r4, r3
 8000848:	bb44      	cbnz	r4, 800089c <_malloc_r+0x88>
 800084a:	4629      	mov	r1, r5
 800084c:	4630      	mov	r0, r6
 800084e:	f7ff ffbf 	bl	80007d0 <sbrk_aligned>
 8000852:	1c43      	adds	r3, r0, #1
 8000854:	4604      	mov	r4, r0
 8000856:	d158      	bne.n	800090a <_malloc_r+0xf6>
 8000858:	f8d8 4000 	ldr.w	r4, [r8]
 800085c:	4627      	mov	r7, r4
 800085e:	2f00      	cmp	r7, #0
 8000860:	d143      	bne.n	80008ea <_malloc_r+0xd6>
 8000862:	2c00      	cmp	r4, #0
 8000864:	d04b      	beq.n	80008fe <_malloc_r+0xea>
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	4639      	mov	r1, r7
 800086a:	4630      	mov	r0, r6
 800086c:	eb04 0903 	add.w	r9, r4, r3
 8000870:	f000 f9cc 	bl	8000c0c <_sbrk_r>
 8000874:	4581      	cmp	r9, r0
 8000876:	d142      	bne.n	80008fe <_malloc_r+0xea>
 8000878:	6821      	ldr	r1, [r4, #0]
 800087a:	4630      	mov	r0, r6
 800087c:	1a6d      	subs	r5, r5, r1
 800087e:	4629      	mov	r1, r5
 8000880:	f7ff ffa6 	bl	80007d0 <sbrk_aligned>
 8000884:	3001      	adds	r0, #1
 8000886:	d03a      	beq.n	80008fe <_malloc_r+0xea>
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	442b      	add	r3, r5
 800088c:	6023      	str	r3, [r4, #0]
 800088e:	f8d8 3000 	ldr.w	r3, [r8]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	bb62      	cbnz	r2, 80008f0 <_malloc_r+0xdc>
 8000896:	f8c8 7000 	str.w	r7, [r8]
 800089a:	e00f      	b.n	80008bc <_malloc_r+0xa8>
 800089c:	6822      	ldr	r2, [r4, #0]
 800089e:	1b52      	subs	r2, r2, r5
 80008a0:	d420      	bmi.n	80008e4 <_malloc_r+0xd0>
 80008a2:	2a0b      	cmp	r2, #11
 80008a4:	d917      	bls.n	80008d6 <_malloc_r+0xc2>
 80008a6:	1961      	adds	r1, r4, r5
 80008a8:	42a3      	cmp	r3, r4
 80008aa:	6025      	str	r5, [r4, #0]
 80008ac:	bf18      	it	ne
 80008ae:	6059      	strne	r1, [r3, #4]
 80008b0:	6863      	ldr	r3, [r4, #4]
 80008b2:	bf08      	it	eq
 80008b4:	f8c8 1000 	streq.w	r1, [r8]
 80008b8:	5162      	str	r2, [r4, r5]
 80008ba:	604b      	str	r3, [r1, #4]
 80008bc:	4630      	mov	r0, r6
 80008be:	f000 f82f 	bl	8000920 <__malloc_unlock>
 80008c2:	f104 000b 	add.w	r0, r4, #11
 80008c6:	1d23      	adds	r3, r4, #4
 80008c8:	f020 0007 	bic.w	r0, r0, #7
 80008cc:	1ac2      	subs	r2, r0, r3
 80008ce:	bf1c      	itt	ne
 80008d0:	1a1b      	subne	r3, r3, r0
 80008d2:	50a3      	strne	r3, [r4, r2]
 80008d4:	e7af      	b.n	8000836 <_malloc_r+0x22>
 80008d6:	6862      	ldr	r2, [r4, #4]
 80008d8:	42a3      	cmp	r3, r4
 80008da:	bf0c      	ite	eq
 80008dc:	f8c8 2000 	streq.w	r2, [r8]
 80008e0:	605a      	strne	r2, [r3, #4]
 80008e2:	e7eb      	b.n	80008bc <_malloc_r+0xa8>
 80008e4:	4623      	mov	r3, r4
 80008e6:	6864      	ldr	r4, [r4, #4]
 80008e8:	e7ae      	b.n	8000848 <_malloc_r+0x34>
 80008ea:	463c      	mov	r4, r7
 80008ec:	687f      	ldr	r7, [r7, #4]
 80008ee:	e7b6      	b.n	800085e <_malloc_r+0x4a>
 80008f0:	461a      	mov	r2, r3
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	42a3      	cmp	r3, r4
 80008f6:	d1fb      	bne.n	80008f0 <_malloc_r+0xdc>
 80008f8:	2300      	movs	r3, #0
 80008fa:	6053      	str	r3, [r2, #4]
 80008fc:	e7de      	b.n	80008bc <_malloc_r+0xa8>
 80008fe:	230c      	movs	r3, #12
 8000900:	4630      	mov	r0, r6
 8000902:	6033      	str	r3, [r6, #0]
 8000904:	f000 f80c 	bl	8000920 <__malloc_unlock>
 8000908:	e794      	b.n	8000834 <_malloc_r+0x20>
 800090a:	6005      	str	r5, [r0, #0]
 800090c:	e7d6      	b.n	80008bc <_malloc_r+0xa8>
 800090e:	bf00      	nop
 8000910:	200001c4 	.word	0x200001c4

08000914 <__malloc_lock>:
 8000914:	4801      	ldr	r0, [pc, #4]	@ (800091c <__malloc_lock+0x8>)
 8000916:	f7ff bf10 	b.w	800073a <__retarget_lock_acquire_recursive>
 800091a:	bf00      	nop
 800091c:	200001bc 	.word	0x200001bc

08000920 <__malloc_unlock>:
 8000920:	4801      	ldr	r0, [pc, #4]	@ (8000928 <__malloc_unlock+0x8>)
 8000922:	f7ff bf0b 	b.w	800073c <__retarget_lock_release_recursive>
 8000926:	bf00      	nop
 8000928:	200001bc 	.word	0x200001bc

0800092c <__sflush_r>:
 800092c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000932:	0716      	lsls	r6, r2, #28
 8000934:	4605      	mov	r5, r0
 8000936:	460c      	mov	r4, r1
 8000938:	d454      	bmi.n	80009e4 <__sflush_r+0xb8>
 800093a:	684b      	ldr	r3, [r1, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	dc02      	bgt.n	8000946 <__sflush_r+0x1a>
 8000940:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000942:	2b00      	cmp	r3, #0
 8000944:	dd48      	ble.n	80009d8 <__sflush_r+0xac>
 8000946:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000948:	2e00      	cmp	r6, #0
 800094a:	d045      	beq.n	80009d8 <__sflush_r+0xac>
 800094c:	2300      	movs	r3, #0
 800094e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000952:	682f      	ldr	r7, [r5, #0]
 8000954:	6a21      	ldr	r1, [r4, #32]
 8000956:	602b      	str	r3, [r5, #0]
 8000958:	d030      	beq.n	80009bc <__sflush_r+0x90>
 800095a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800095c:	89a3      	ldrh	r3, [r4, #12]
 800095e:	0759      	lsls	r1, r3, #29
 8000960:	d505      	bpl.n	800096e <__sflush_r+0x42>
 8000962:	6863      	ldr	r3, [r4, #4]
 8000964:	1ad2      	subs	r2, r2, r3
 8000966:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000968:	b10b      	cbz	r3, 800096e <__sflush_r+0x42>
 800096a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800096c:	1ad2      	subs	r2, r2, r3
 800096e:	2300      	movs	r3, #0
 8000970:	4628      	mov	r0, r5
 8000972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000974:	6a21      	ldr	r1, [r4, #32]
 8000976:	47b0      	blx	r6
 8000978:	1c43      	adds	r3, r0, #1
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	d106      	bne.n	800098c <__sflush_r+0x60>
 800097e:	6829      	ldr	r1, [r5, #0]
 8000980:	291d      	cmp	r1, #29
 8000982:	d82b      	bhi.n	80009dc <__sflush_r+0xb0>
 8000984:	4a28      	ldr	r2, [pc, #160]	@ (8000a28 <__sflush_r+0xfc>)
 8000986:	410a      	asrs	r2, r1
 8000988:	07d6      	lsls	r6, r2, #31
 800098a:	d427      	bmi.n	80009dc <__sflush_r+0xb0>
 800098c:	2200      	movs	r2, #0
 800098e:	6062      	str	r2, [r4, #4]
 8000990:	6922      	ldr	r2, [r4, #16]
 8000992:	04d9      	lsls	r1, r3, #19
 8000994:	6022      	str	r2, [r4, #0]
 8000996:	d504      	bpl.n	80009a2 <__sflush_r+0x76>
 8000998:	1c42      	adds	r2, r0, #1
 800099a:	d101      	bne.n	80009a0 <__sflush_r+0x74>
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	b903      	cbnz	r3, 80009a2 <__sflush_r+0x76>
 80009a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80009a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009a4:	602f      	str	r7, [r5, #0]
 80009a6:	b1b9      	cbz	r1, 80009d8 <__sflush_r+0xac>
 80009a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d002      	beq.n	80009b6 <__sflush_r+0x8a>
 80009b0:	4628      	mov	r0, r5
 80009b2:	f7ff fec5 	bl	8000740 <_free_r>
 80009b6:	2300      	movs	r3, #0
 80009b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80009ba:	e00d      	b.n	80009d8 <__sflush_r+0xac>
 80009bc:	2301      	movs	r3, #1
 80009be:	4628      	mov	r0, r5
 80009c0:	47b0      	blx	r6
 80009c2:	4602      	mov	r2, r0
 80009c4:	1c50      	adds	r0, r2, #1
 80009c6:	d1c9      	bne.n	800095c <__sflush_r+0x30>
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0c6      	beq.n	800095c <__sflush_r+0x30>
 80009ce:	2b1d      	cmp	r3, #29
 80009d0:	d001      	beq.n	80009d6 <__sflush_r+0xaa>
 80009d2:	2b16      	cmp	r3, #22
 80009d4:	d11d      	bne.n	8000a12 <__sflush_r+0xe6>
 80009d6:	602f      	str	r7, [r5, #0]
 80009d8:	2000      	movs	r0, #0
 80009da:	e021      	b.n	8000a20 <__sflush_r+0xf4>
 80009dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	e01a      	b.n	8000a1a <__sflush_r+0xee>
 80009e4:	690f      	ldr	r7, [r1, #16]
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	d0f6      	beq.n	80009d8 <__sflush_r+0xac>
 80009ea:	0793      	lsls	r3, r2, #30
 80009ec:	bf18      	it	ne
 80009ee:	2300      	movne	r3, #0
 80009f0:	680e      	ldr	r6, [r1, #0]
 80009f2:	bf08      	it	eq
 80009f4:	694b      	ldreq	r3, [r1, #20]
 80009f6:	1bf6      	subs	r6, r6, r7
 80009f8:	600f      	str	r7, [r1, #0]
 80009fa:	608b      	str	r3, [r1, #8]
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	ddeb      	ble.n	80009d8 <__sflush_r+0xac>
 8000a00:	4633      	mov	r3, r6
 8000a02:	463a      	mov	r2, r7
 8000a04:	4628      	mov	r0, r5
 8000a06:	6a21      	ldr	r1, [r4, #32]
 8000a08:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000a0c:	47e0      	blx	ip
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	dc07      	bgt.n	8000a22 <__sflush_r+0xf6>
 8000a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1e:	81a3      	strh	r3, [r4, #12]
 8000a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a22:	4407      	add	r7, r0
 8000a24:	1a36      	subs	r6, r6, r0
 8000a26:	e7e9      	b.n	80009fc <__sflush_r+0xd0>
 8000a28:	dfbffffe 	.word	0xdfbffffe

08000a2c <_fflush_r>:
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	690b      	ldr	r3, [r1, #16]
 8000a30:	4605      	mov	r5, r0
 8000a32:	460c      	mov	r4, r1
 8000a34:	b913      	cbnz	r3, 8000a3c <_fflush_r+0x10>
 8000a36:	2500      	movs	r5, #0
 8000a38:	4628      	mov	r0, r5
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
 8000a3c:	b118      	cbz	r0, 8000a46 <_fflush_r+0x1a>
 8000a3e:	6a03      	ldr	r3, [r0, #32]
 8000a40:	b90b      	cbnz	r3, 8000a46 <_fflush_r+0x1a>
 8000a42:	f7ff fd7f 	bl	8000544 <__sinit>
 8000a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f3      	beq.n	8000a36 <_fflush_r+0xa>
 8000a4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000a50:	07d0      	lsls	r0, r2, #31
 8000a52:	d404      	bmi.n	8000a5e <_fflush_r+0x32>
 8000a54:	0599      	lsls	r1, r3, #22
 8000a56:	d402      	bmi.n	8000a5e <_fflush_r+0x32>
 8000a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a5a:	f7ff fe6e 	bl	800073a <__retarget_lock_acquire_recursive>
 8000a5e:	4628      	mov	r0, r5
 8000a60:	4621      	mov	r1, r4
 8000a62:	f7ff ff63 	bl	800092c <__sflush_r>
 8000a66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a68:	4605      	mov	r5, r0
 8000a6a:	07da      	lsls	r2, r3, #31
 8000a6c:	d4e4      	bmi.n	8000a38 <_fflush_r+0xc>
 8000a6e:	89a3      	ldrh	r3, [r4, #12]
 8000a70:	059b      	lsls	r3, r3, #22
 8000a72:	d4e1      	bmi.n	8000a38 <_fflush_r+0xc>
 8000a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a76:	f7ff fe61 	bl	800073c <__retarget_lock_release_recursive>
 8000a7a:	e7dd      	b.n	8000a38 <_fflush_r+0xc>

08000a7c <_putc_r>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	460d      	mov	r5, r1
 8000a80:	4614      	mov	r4, r2
 8000a82:	4606      	mov	r6, r0
 8000a84:	b118      	cbz	r0, 8000a8e <_putc_r+0x12>
 8000a86:	6a03      	ldr	r3, [r0, #32]
 8000a88:	b90b      	cbnz	r3, 8000a8e <_putc_r+0x12>
 8000a8a:	f7ff fd5b 	bl	8000544 <__sinit>
 8000a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a90:	07d8      	lsls	r0, r3, #31
 8000a92:	d405      	bmi.n	8000aa0 <_putc_r+0x24>
 8000a94:	89a3      	ldrh	r3, [r4, #12]
 8000a96:	0599      	lsls	r1, r3, #22
 8000a98:	d402      	bmi.n	8000aa0 <_putc_r+0x24>
 8000a9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a9c:	f7ff fe4d 	bl	800073a <__retarget_lock_acquire_recursive>
 8000aa0:	68a3      	ldr	r3, [r4, #8]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	60a3      	str	r3, [r4, #8]
 8000aa8:	da05      	bge.n	8000ab6 <_putc_r+0x3a>
 8000aaa:	69a2      	ldr	r2, [r4, #24]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	db12      	blt.n	8000ad6 <_putc_r+0x5a>
 8000ab0:	b2eb      	uxtb	r3, r5
 8000ab2:	2b0a      	cmp	r3, #10
 8000ab4:	d00f      	beq.n	8000ad6 <_putc_r+0x5a>
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	6022      	str	r2, [r4, #0]
 8000abc:	701d      	strb	r5, [r3, #0]
 8000abe:	b2ed      	uxtb	r5, r5
 8000ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ac2:	07da      	lsls	r2, r3, #31
 8000ac4:	d405      	bmi.n	8000ad2 <_putc_r+0x56>
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	059b      	lsls	r3, r3, #22
 8000aca:	d402      	bmi.n	8000ad2 <_putc_r+0x56>
 8000acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ace:	f7ff fe35 	bl	800073c <__retarget_lock_release_recursive>
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	4622      	mov	r2, r4
 8000ada:	4630      	mov	r0, r6
 8000adc:	f000 f802 	bl	8000ae4 <__swbuf_r>
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	e7ed      	b.n	8000ac0 <_putc_r+0x44>

08000ae4 <__swbuf_r>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	460e      	mov	r6, r1
 8000ae8:	4614      	mov	r4, r2
 8000aea:	4605      	mov	r5, r0
 8000aec:	b118      	cbz	r0, 8000af6 <__swbuf_r+0x12>
 8000aee:	6a03      	ldr	r3, [r0, #32]
 8000af0:	b90b      	cbnz	r3, 8000af6 <__swbuf_r+0x12>
 8000af2:	f7ff fd27 	bl	8000544 <__sinit>
 8000af6:	69a3      	ldr	r3, [r4, #24]
 8000af8:	60a3      	str	r3, [r4, #8]
 8000afa:	89a3      	ldrh	r3, [r4, #12]
 8000afc:	071a      	lsls	r2, r3, #28
 8000afe:	d501      	bpl.n	8000b04 <__swbuf_r+0x20>
 8000b00:	6923      	ldr	r3, [r4, #16]
 8000b02:	b943      	cbnz	r3, 8000b16 <__swbuf_r+0x32>
 8000b04:	4621      	mov	r1, r4
 8000b06:	4628      	mov	r0, r5
 8000b08:	f000 f82a 	bl	8000b60 <__swsetup_r>
 8000b0c:	b118      	cbz	r0, 8000b16 <__swbuf_r+0x32>
 8000b0e:	f04f 37ff 	mov.w	r7, #4294967295
 8000b12:	4638      	mov	r0, r7
 8000b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	6922      	ldr	r2, [r4, #16]
 8000b1a:	b2f6      	uxtb	r6, r6
 8000b1c:	1a98      	subs	r0, r3, r2
 8000b1e:	6963      	ldr	r3, [r4, #20]
 8000b20:	4637      	mov	r7, r6
 8000b22:	4283      	cmp	r3, r0
 8000b24:	dc05      	bgt.n	8000b32 <__swbuf_r+0x4e>
 8000b26:	4621      	mov	r1, r4
 8000b28:	4628      	mov	r0, r5
 8000b2a:	f7ff ff7f 	bl	8000a2c <_fflush_r>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d1ed      	bne.n	8000b0e <__swbuf_r+0x2a>
 8000b32:	68a3      	ldr	r3, [r4, #8]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	60a3      	str	r3, [r4, #8]
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	6022      	str	r2, [r4, #0]
 8000b3e:	701e      	strb	r6, [r3, #0]
 8000b40:	6962      	ldr	r2, [r4, #20]
 8000b42:	1c43      	adds	r3, r0, #1
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d004      	beq.n	8000b52 <__swbuf_r+0x6e>
 8000b48:	89a3      	ldrh	r3, [r4, #12]
 8000b4a:	07db      	lsls	r3, r3, #31
 8000b4c:	d5e1      	bpl.n	8000b12 <__swbuf_r+0x2e>
 8000b4e:	2e0a      	cmp	r6, #10
 8000b50:	d1df      	bne.n	8000b12 <__swbuf_r+0x2e>
 8000b52:	4621      	mov	r1, r4
 8000b54:	4628      	mov	r0, r5
 8000b56:	f7ff ff69 	bl	8000a2c <_fflush_r>
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d0d9      	beq.n	8000b12 <__swbuf_r+0x2e>
 8000b5e:	e7d6      	b.n	8000b0e <__swbuf_r+0x2a>

08000b60 <__swsetup_r>:
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <__swsetup_r+0xa8>)
 8000b64:	4605      	mov	r5, r0
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	460c      	mov	r4, r1
 8000b6a:	b118      	cbz	r0, 8000b74 <__swsetup_r+0x14>
 8000b6c:	6a03      	ldr	r3, [r0, #32]
 8000b6e:	b90b      	cbnz	r3, 8000b74 <__swsetup_r+0x14>
 8000b70:	f7ff fce8 	bl	8000544 <__sinit>
 8000b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b78:	0719      	lsls	r1, r3, #28
 8000b7a:	d422      	bmi.n	8000bc2 <__swsetup_r+0x62>
 8000b7c:	06da      	lsls	r2, r3, #27
 8000b7e:	d407      	bmi.n	8000b90 <__swsetup_r+0x30>
 8000b80:	2209      	movs	r2, #9
 8000b82:	602a      	str	r2, [r5, #0]
 8000b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	81a3      	strh	r3, [r4, #12]
 8000b8e:	e033      	b.n	8000bf8 <__swsetup_r+0x98>
 8000b90:	0758      	lsls	r0, r3, #29
 8000b92:	d512      	bpl.n	8000bba <__swsetup_r+0x5a>
 8000b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b96:	b141      	cbz	r1, 8000baa <__swsetup_r+0x4a>
 8000b98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d002      	beq.n	8000ba6 <__swsetup_r+0x46>
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f7ff fdcd 	bl	8000740 <_free_r>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000baa:	89a3      	ldrh	r3, [r4, #12]
 8000bac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000bb0:	81a3      	strh	r3, [r4, #12]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	6063      	str	r3, [r4, #4]
 8000bb6:	6923      	ldr	r3, [r4, #16]
 8000bb8:	6023      	str	r3, [r4, #0]
 8000bba:	89a3      	ldrh	r3, [r4, #12]
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	81a3      	strh	r3, [r4, #12]
 8000bc2:	6923      	ldr	r3, [r4, #16]
 8000bc4:	b94b      	cbnz	r3, 8000bda <__swsetup_r+0x7a>
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bd0:	d003      	beq.n	8000bda <__swsetup_r+0x7a>
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f000 f84e 	bl	8000c76 <__smakebuf_r>
 8000bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bde:	f013 0201 	ands.w	r2, r3, #1
 8000be2:	d00a      	beq.n	8000bfa <__swsetup_r+0x9a>
 8000be4:	2200      	movs	r2, #0
 8000be6:	60a2      	str	r2, [r4, #8]
 8000be8:	6962      	ldr	r2, [r4, #20]
 8000bea:	4252      	negs	r2, r2
 8000bec:	61a2      	str	r2, [r4, #24]
 8000bee:	6922      	ldr	r2, [r4, #16]
 8000bf0:	b942      	cbnz	r2, 8000c04 <__swsetup_r+0xa4>
 8000bf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000bf6:	d1c5      	bne.n	8000b84 <__swsetup_r+0x24>
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	0799      	lsls	r1, r3, #30
 8000bfc:	bf58      	it	pl
 8000bfe:	6962      	ldrpl	r2, [r4, #20]
 8000c00:	60a2      	str	r2, [r4, #8]
 8000c02:	e7f4      	b.n	8000bee <__swsetup_r+0x8e>
 8000c04:	2000      	movs	r0, #0
 8000c06:	e7f7      	b.n	8000bf8 <__swsetup_r+0x98>
 8000c08:	2000000c 	.word	0x2000000c

08000c0c <_sbrk_r>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2300      	movs	r3, #0
 8000c10:	4d05      	ldr	r5, [pc, #20]	@ (8000c28 <_sbrk_r+0x1c>)
 8000c12:	4604      	mov	r4, r0
 8000c14:	4608      	mov	r0, r1
 8000c16:	602b      	str	r3, [r5, #0]
 8000c18:	f7ff fba8 	bl	800036c <_sbrk>
 8000c1c:	1c43      	adds	r3, r0, #1
 8000c1e:	d102      	bne.n	8000c26 <_sbrk_r+0x1a>
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	b103      	cbz	r3, 8000c26 <_sbrk_r+0x1a>
 8000c24:	6023      	str	r3, [r4, #0]
 8000c26:	bd38      	pop	{r3, r4, r5, pc}
 8000c28:	200001b8 	.word	0x200001b8

08000c2c <__swhatbuf_r>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	460c      	mov	r4, r1
 8000c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c34:	4615      	mov	r5, r2
 8000c36:	2900      	cmp	r1, #0
 8000c38:	461e      	mov	r6, r3
 8000c3a:	b096      	sub	sp, #88	@ 0x58
 8000c3c:	da0c      	bge.n	8000c58 <__swhatbuf_r+0x2c>
 8000c3e:	89a3      	ldrh	r3, [r4, #12]
 8000c40:	2100      	movs	r1, #0
 8000c42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000c46:	bf14      	ite	ne
 8000c48:	2340      	movne	r3, #64	@ 0x40
 8000c4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000c4e:	2000      	movs	r0, #0
 8000c50:	6031      	str	r1, [r6, #0]
 8000c52:	602b      	str	r3, [r5, #0]
 8000c54:	b016      	add	sp, #88	@ 0x58
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	466a      	mov	r2, sp
 8000c5a:	f000 f849 	bl	8000cf0 <_fstat_r>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	dbed      	blt.n	8000c3e <__swhatbuf_r+0x12>
 8000c62:	9901      	ldr	r1, [sp, #4]
 8000c64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000c68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000c6c:	4259      	negs	r1, r3
 8000c6e:	4159      	adcs	r1, r3
 8000c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c74:	e7eb      	b.n	8000c4e <__swhatbuf_r+0x22>

08000c76 <__smakebuf_r>:
 8000c76:	898b      	ldrh	r3, [r1, #12]
 8000c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c7a:	079d      	lsls	r5, r3, #30
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	d507      	bpl.n	8000c92 <__smakebuf_r+0x1c>
 8000c82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000c86:	6023      	str	r3, [r4, #0]
 8000c88:	6123      	str	r3, [r4, #16]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	6163      	str	r3, [r4, #20]
 8000c8e:	b003      	add	sp, #12
 8000c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c92:	466a      	mov	r2, sp
 8000c94:	ab01      	add	r3, sp, #4
 8000c96:	f7ff ffc9 	bl	8000c2c <__swhatbuf_r>
 8000c9a:	9f00      	ldr	r7, [sp, #0]
 8000c9c:	4605      	mov	r5, r0
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	f7ff fdb7 	bl	8000814 <_malloc_r>
 8000ca6:	b948      	cbnz	r0, 8000cbc <__smakebuf_r+0x46>
 8000ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cac:	059a      	lsls	r2, r3, #22
 8000cae:	d4ee      	bmi.n	8000c8e <__smakebuf_r+0x18>
 8000cb0:	f023 0303 	bic.w	r3, r3, #3
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	81a3      	strh	r3, [r4, #12]
 8000cba:	e7e2      	b.n	8000c82 <__smakebuf_r+0xc>
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc6:	81a3      	strh	r3, [r4, #12]
 8000cc8:	9b01      	ldr	r3, [sp, #4]
 8000cca:	6020      	str	r0, [r4, #0]
 8000ccc:	b15b      	cbz	r3, 8000ce6 <__smakebuf_r+0x70>
 8000cce:	4630      	mov	r0, r6
 8000cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cd4:	f000 f81e 	bl	8000d14 <_isatty_r>
 8000cd8:	b128      	cbz	r0, 8000ce6 <__smakebuf_r+0x70>
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	f023 0303 	bic.w	r3, r3, #3
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	81a3      	strh	r3, [r4, #12]
 8000ce6:	89a3      	ldrh	r3, [r4, #12]
 8000ce8:	431d      	orrs	r5, r3
 8000cea:	81a5      	strh	r5, [r4, #12]
 8000cec:	e7cf      	b.n	8000c8e <__smakebuf_r+0x18>
	...

08000cf0 <_fstat_r>:
 8000cf0:	b538      	push	{r3, r4, r5, lr}
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	4d06      	ldr	r5, [pc, #24]	@ (8000d10 <_fstat_r+0x20>)
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	602b      	str	r3, [r5, #0]
 8000cfe:	f7ff fb0f 	bl	8000320 <_fstat>
 8000d02:	1c43      	adds	r3, r0, #1
 8000d04:	d102      	bne.n	8000d0c <_fstat_r+0x1c>
 8000d06:	682b      	ldr	r3, [r5, #0]
 8000d08:	b103      	cbz	r3, 8000d0c <_fstat_r+0x1c>
 8000d0a:	6023      	str	r3, [r4, #0]
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001b8 	.word	0x200001b8

08000d14 <_isatty_r>:
 8000d14:	b538      	push	{r3, r4, r5, lr}
 8000d16:	2300      	movs	r3, #0
 8000d18:	4d05      	ldr	r5, [pc, #20]	@ (8000d30 <_isatty_r+0x1c>)
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	602b      	str	r3, [r5, #0]
 8000d20:	f7ff fb0d 	bl	800033e <_isatty>
 8000d24:	1c43      	adds	r3, r0, #1
 8000d26:	d102      	bne.n	8000d2e <_isatty_r+0x1a>
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	b103      	cbz	r3, 8000d2e <_isatty_r+0x1a>
 8000d2c:	6023      	str	r3, [r4, #0]
 8000d2e:	bd38      	pop	{r3, r4, r5, pc}
 8000d30:	200001b8 	.word	0x200001b8

08000d34 <_init>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	bf00      	nop
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr

08000d40 <_fini>:
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	bf00      	nop
 8000d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d46:	bc08      	pop	{r3}
 8000d48:	469e      	mov	lr, r3
 8000d4a:	4770      	bx	lr

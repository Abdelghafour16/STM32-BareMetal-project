
9_UART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000020c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800033c  08000344  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800033c  0800033c  00001344  2**0
                  CONTENTS
  4 .ARM          00000000  0800033c  0800033c  00001344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800033c  08000344  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800033c  0800033c  0000133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000340  08000340  00001340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000344  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000344  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000044b  00000000  00000000  0000136d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000170  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019553  00000000  00000000  000019d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000008d6  00000000  00000000  0001af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0bd  00000000  00000000  0001b7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a98bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  000a9900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000a99e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000324 	.word	0x08000324

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000324 	.word	0x08000324

08000170 <main>:
void uart_write(int ch);
void uart_tx_init(void);



int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	uart_tx_init();
 8000174:	f000 f804 	bl	8000180 <uart_tx_init>

     while(1){

    	 uart_write('f');
 8000178:	2066      	movs	r0, #102	@ 0x66
 800017a:	f000 f84d 	bl	8000218 <uart_write>
 800017e:	e7fb      	b.n	8000178 <main+0x8>

08000180 <uart_tx_init>:


     }
}

void uart_tx_init(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	/*******************configure UART GPIO pin*********************/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8000184:	4b20      	ldr	r3, [pc, #128]	@ (8000208 <uart_tx_init+0x88>)
 8000186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000188:	4a1f      	ldr	r2, [pc, #124]	@ (8000208 <uart_tx_init+0x88>)
 800018a:	f043 0301 	orr.w	r3, r3, #1
 800018e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set PA2 to alternate function mode*/
	GPIOA->MODER |=(1U<<5);
 8000190:	4b1e      	ldr	r3, [pc, #120]	@ (800020c <uart_tx_init+0x8c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a1d      	ldr	r2, [pc, #116]	@ (800020c <uart_tx_init+0x8c>)
 8000196:	f043 0320 	orr.w	r3, r3, #32
 800019a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<4);
 800019c:	4b1b      	ldr	r3, [pc, #108]	@ (800020c <uart_tx_init+0x8c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a1a      	ldr	r2, [pc, #104]	@ (800020c <uart_tx_init+0x8c>)
 80001a2:	f023 0310 	bic.w	r3, r3, #16
 80001a6:	6013      	str	r3, [r2, #0]


	/*set PA2 alternate function type to UART_TX*/
	GPIOA->AFR[0] &=~(1U<<11);
 80001a8:	4b18      	ldr	r3, [pc, #96]	@ (800020c <uart_tx_init+0x8c>)
 80001aa:	6a1b      	ldr	r3, [r3, #32]
 80001ac:	4a17      	ldr	r2, [pc, #92]	@ (800020c <uart_tx_init+0x8c>)
 80001ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80001b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80001b4:	4b15      	ldr	r3, [pc, #84]	@ (800020c <uart_tx_init+0x8c>)
 80001b6:	6a1b      	ldr	r3, [r3, #32]
 80001b8:	4a14      	ldr	r2, [pc, #80]	@ (800020c <uart_tx_init+0x8c>)
 80001ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80001c0:	4b12      	ldr	r3, [pc, #72]	@ (800020c <uart_tx_init+0x8c>)
 80001c2:	6a1b      	ldr	r3, [r3, #32]
 80001c4:	4a11      	ldr	r2, [pc, #68]	@ (800020c <uart_tx_init+0x8c>)
 80001c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<8);
 80001cc:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <uart_tx_init+0x8c>)
 80001ce:	6a1b      	ldr	r3, [r3, #32]
 80001d0:	4a0e      	ldr	r2, [pc, #56]	@ (800020c <uart_tx_init+0x8c>)
 80001d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001d6:	6213      	str	r3, [r2, #32]



	/*******************configure UART module *********************/
	/*Enable clock access to UART3*/
	RCC->APB1ENR |= UART2EN;
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <uart_tx_init+0x88>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <uart_tx_init+0x88>)
 80001de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001e2:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure the BAUDRATE*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80001e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001e8:	4909      	ldr	r1, [pc, #36]	@ (8000210 <uart_tx_init+0x90>)
 80001ea:	480a      	ldr	r0, [pc, #40]	@ (8000214 <uart_tx_init+0x94>)
 80001ec:	f000 f82a 	bl	8000244 <uart_set_baudrate>

	/*configure the transfer direction*/
	USART2->CR1 = CR1_TE;
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <uart_tx_init+0x94>)
 80001f2:	2208      	movs	r2, #8
 80001f4:	60da      	str	r2, [r3, #12]

	/*Enable the UART module*/
	USART2->CR1 |= CR1_UE;
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <uart_tx_init+0x94>)
 80001f8:	68db      	ldr	r3, [r3, #12]
 80001fa:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <uart_tx_init+0x94>)
 80001fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000200:	60d3      	str	r3, [r2, #12]

}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020000 	.word	0x40020000
 8000210:	00f42400 	.word	0x00f42400
 8000214:	40004400 	.word	0x40004400

08000218 <uart_write>:
void uart_write(int ch){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	/*make the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}                    //we stuck here until it becomes true then we can write our value
 8000220:	bf00      	nop
 8000222:	4b07      	ldr	r3, [pc, #28]	@ (8000240 <uart_write+0x28>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0f9      	beq.n	8000222 <uart_write+0xa>

	/*write to transmit data register*/
	USART2->DR   = (ch   &  0xff);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a03      	ldr	r2, [pc, #12]	@ (8000240 <uart_write+0x28>)
 8000232:	b2db      	uxtb	r3, r3
 8000234:	6053      	str	r3, [r2, #4]
}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	40004400 	.word	0x40004400

08000244 <uart_set_baudrate>:



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t BaudRate){
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]

	USARTx->BRR = compute_uart_bd(periphCLK,BaudRate);
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	68b8      	ldr	r0, [r7, #8]
 8000254:	f000 f807 	bl	8000266 <compute_uart_bd>
 8000258:	4602      	mov	r2, r0
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	609a      	str	r2, [r3, #8]
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <compute_uart_bd>:

static uint32_t compute_uart_bd(uint32_t periphCLK, uint32_t BaudRate){
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]

	return ((periphCLK + (BaudRate/2U))/BaudRate);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	085a      	lsrs	r2, r3, #1
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	441a      	add	r2, r3
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800027e:	4618      	mov	r0, r3
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	@ (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	@ (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	@ (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	@ (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	@ (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	@ (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 f811 	bl	80002dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff59 	bl	8000170 <main>

080002be <LoopForever>:

LoopForever:
  b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08000344 	.word	0x08000344
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	2000001c 	.word	0x2000001c

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <__libc_init_array>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	2600      	movs	r6, #0
 80002e0:	4d0c      	ldr	r5, [pc, #48]	@ (8000314 <__libc_init_array+0x38>)
 80002e2:	4c0d      	ldr	r4, [pc, #52]	@ (8000318 <__libc_init_array+0x3c>)
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	10a4      	asrs	r4, r4, #2
 80002e8:	42a6      	cmp	r6, r4
 80002ea:	d109      	bne.n	8000300 <__libc_init_array+0x24>
 80002ec:	f000 f81a 	bl	8000324 <_init>
 80002f0:	2600      	movs	r6, #0
 80002f2:	4d0a      	ldr	r5, [pc, #40]	@ (800031c <__libc_init_array+0x40>)
 80002f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000320 <__libc_init_array+0x44>)
 80002f6:	1b64      	subs	r4, r4, r5
 80002f8:	10a4      	asrs	r4, r4, #2
 80002fa:	42a6      	cmp	r6, r4
 80002fc:	d105      	bne.n	800030a <__libc_init_array+0x2e>
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f855 3b04 	ldr.w	r3, [r5], #4
 8000304:	4798      	blx	r3
 8000306:	3601      	adds	r6, #1
 8000308:	e7ee      	b.n	80002e8 <__libc_init_array+0xc>
 800030a:	f855 3b04 	ldr.w	r3, [r5], #4
 800030e:	4798      	blx	r3
 8000310:	3601      	adds	r6, #1
 8000312:	e7f2      	b.n	80002fa <__libc_init_array+0x1e>
 8000314:	0800033c 	.word	0x0800033c
 8000318:	0800033c 	.word	0x0800033c
 800031c:	0800033c 	.word	0x0800033c
 8000320:	08000340 	.word	0x08000340

08000324 <_init>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr

08000330 <_fini>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr
